#!/srvr/cs3311psql/lib/php535/bin/php
<?php

require("a2.php");

$db = dbConnect(DB_CONNECTION);
// Insert code here
//Title (year, content_rating, lang) [imdb_score, votes, num_voted_users]
if (!is_null($argv[4])) {
	$Genres = $argv[1];
	$K = $argv[2];
	$StartYear = $argv[3];
	$EndYear = $argv[4];
	//First, get the individual genres
	//Must contain all of the genres
	$GenreList = split("&", $Genres);
	//Now, 
	$movies = <<<hello
	select m.id, m.title, m.year, m.content_rating, m.lang, r.imdb_score, r.num_voted_users
	from movie m, rating r
	where m.id = r.movie_id and m.year >= %d and m.year <= %d
	order by r.imdb_score desc, r.num_voted_users desc;
hello;
	$sql1 = mkSQL($movies, $StartYear, $EndYear);
	$res1 = dbQuery($db, $sql1);
	$i2 = 1;
	while ($t1 = dbNext($res1)) {
		//Extract the id
		$movie_id = $t1[id];
		$genres = <<<genres
					select genre
					from genre
					where movie_id = %d;
genres;
		$sql2 = mkSQL($genres, $movie_id);
		$res2 = dbQuery($db, $sql2);
		$array = array();
		while ($t2 = dbNext($res2)) {
			array_push($array, $t2[genre]);
		}
		if (array_intersect($GenreList, $array) == $GenreList) {
			//Then display the info
			if (is_null($t1[year])) {
				continue;
			}
			$str2 = "$i2. ";
			$str2 = $str2 . "$t1[title] ";
			// It's possible for year, rating and language to all be null
			if (!(is_null($t1[year])) ||  !(is_null($t1[content_rating])) || !(is_null($t1[lang]))) {
				$str2 = $str2 . "(";
				if (!(is_null($t1[year]))) {
					$str2 = $str2 . "$t1[year], ";
				}
				if (!(is_null($t1[content_rating]))) {
					$str2 = $str2 . "$t1[content_rating], ";
				}
				if (!(is_null($t1[lang]))) {
					$str2 = $str2 . "$t1[lang]";
				}
				$str2 = $str2 . ")";
			}

			// It's possible for imdb_score, votes and numvotes to be null
			if (!(is_null($t1[imdb_score])) || !(is_null($t1[num_voted_users]))) {
				$str2 = $str2 . " [";
				if (!(is_null($t1[imdb_score]))) {
					$str2 = $str2 . "$t1[imdb_score], ";
				}
				if (!(is_null($t1[num_voted_users]))) {
					$str2 = $str2 . "$t1[num_voted_users]";
				}
				$str2 = $str2 . "]";
			}
			echo "$str2\n";
			if ($i2 == $K) {
				break;
			}
			$i2 = $i2 + 1;
	
		}
	}

hi;

} else {
	$K = $argv[1];
	$StartYear = $argv[2];
	$EndYear = $argv[3];
	// So we display up to K results
	//First, find all movies between start and end years
	$movies = <<<hello2
	select m.title, m.year, m.content_rating, m.lang, r.imdb_score, r.num_voted_users
	from movie m, rating r
	where m.id = r.movie_id and m.year >= %d and m.year <= %d
	order by r.imdb_score desc, r.num_voted_users desc;
hello2;
	$sql2 = mkSQL($movies, $StartYear, $EndYear, $K);
	$res2 = dbQuery($db, $sql2);
	$i2 = 1;
	//Title (year, content_rating, lang) [imdb_score, votes, num_voted_users]
	while ($t2 = dbNext($res2)) {
		if (is_null($t2[year])) {
			continue;
		}
		$str2 = "$i2. ";
		$str2 = $str2 . "$t2[title] ";
		// It's possible for year, rating and language to all be null
		if (!(is_null($t2[year])) || !(is_null($t2[content_rating])) || !(is_null($t2[lang]))) {
			$str2 = $str2 . "(";
			if (!(is_null($t2[year]))) {
				$str2 = $str2 . "$t2[year], ";
			}
			if (!(is_null($t2[content_rating]))) {
				$str2 = $str2 . "$t2[content_rating], ";
			}
			if (!(is_null($t2[lang]))) {
				$str2 = $str2 . "$t2[lang]";
			}
			$str2 = $str2 . ")";
		}

		// It's possible for imdb_score, votes and numvotes to be null
		if (!(is_null($t2[imdb_score])) || !(is_null($t2[num_voted_users]))) {
			$str2 = $str2 . " [";
			if (!(is_null($t2[imdb_score]))) {
				$str2 = $str2 . "$t2[imdb_score], ";
			}
			if (!(is_null($t2[num_voted_users]))) {
				$str2 = $str2 . "$t2[num_voted_users]";
			}
			$str2 = $str2 . "]";
		}
		echo "$str2\n";
		if ($i2 == $K) {
			break;
		}
		$i2 = $i2 + 1;
	}
}
// or






?>
